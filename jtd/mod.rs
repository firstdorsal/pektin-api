// Code generated by jtd-codegen for Rust v0.2.1

use serde::{Deserialize, Serialize};

#[derive(Serialize, Deserialize)]
#[serde(tag = "rtype")]
pub enum Recordtype {
    #[serde(rename = "A")]
    A(RecordtypeA),

    #[serde(rename = "AAAA")]
    Aaaa(RecordtypeAaaa),

    #[serde(rename = "CAA")]
    Caa(RecordtypeCaa),

    #[serde(rename = "CNAME")]
    Cname(RecordtypeCname),

    #[serde(rename = "MX")]
    Mx(RecordtypeMx),

    #[serde(rename = "NS")]
    Ns(RecordtypeNs),

    #[serde(rename = "OPENPGPKEY")]
    Openpgpkey(RecordtypeOpenpgpkey),

    #[serde(rename = "SOA")]
    Soa(RecordtypeSoa),

    #[serde(rename = "SRV")]
    Srv(RecordtypeSrv),

    #[serde(rename = "TLSA")]
    Tlsa(RecordtypeTlsa),

    #[serde(rename = "TXT")]
    Txt(RecordtypeTxt),
}

#[derive(Serialize, Deserialize)]
pub struct RecordtypeA {
    #[serde(rename = "A")]
    pub a: String,
}

#[derive(Serialize, Deserialize)]
pub struct RecordtypeAaaa {
    #[serde(rename = "AAAA")]
    pub aaaa: String,
}

#[derive(Serialize, Deserialize)]
pub struct RecordtypeCaa {
    #[serde(rename = "CAA")]
    pub caa: CaaType,
}

#[derive(Serialize, Deserialize)]
pub struct RecordtypeCname {
    #[serde(rename = "CNAME")]
    pub cname: String,
}

#[derive(Serialize, Deserialize)]
pub struct RecordtypeMx {
    #[serde(rename = "MX")]
    pub mx: MxType,
}

#[derive(Serialize, Deserialize)]
pub struct RecordtypeNs {
    #[serde(rename = "NS")]
    pub ns: String,
}

#[derive(Serialize, Deserialize)]
pub struct RecordtypeOpenpgpkey {
    #[serde(rename = "OPENPGPKEY")]
    pub openpgpkey: String,
}

#[derive(Serialize, Deserialize)]
pub struct RecordtypeSoa {
    #[serde(rename = "SOA")]
    pub soa: SoaType,
}

#[derive(Serialize, Deserialize)]
pub struct RecordtypeSrv {
    #[serde(rename = "SRV")]
    pub srv: SrvType,
}

#[derive(Serialize, Deserialize)]
pub struct RecordtypeTlsa {
    #[serde(rename = "TLSA")]
    pub tlsa: TlsaType,
}

#[derive(Serialize, Deserialize)]
pub struct RecordtypeTxt {
    #[serde(rename = "TXT")]
    pub txt: String,
}

#[derive(Serialize, Deserialize)]
pub enum CaaTypeTag {
    #[serde(rename = "iodef")]
    Iodef,

    #[serde(rename = "issue")]
    Issue,

    #[serde(rename = "issuewild")]
    Issuewild,
}

#[derive(Serialize, Deserialize)]
pub struct CaaType {
    #[serde(rename = "issuer_critical")]
    pub issuerCritical: bool,

    #[serde(rename = "tag")]
    pub tag: CaaTypeTag,

    #[serde(rename = "value")]
    pub value: String,
}

#[derive(Serialize, Deserialize)]
pub struct MxType {
    #[serde(rename = "exchange")]
    pub exchange: String,

    #[serde(rename = "preference")]
    pub preference: u16,
}

#[derive(Serialize, Deserialize)]
pub struct SoaType {
    #[serde(rename = "expire")]
    pub expire: i32,

    #[serde(rename = "minimum")]
    pub minimum: u32,

    #[serde(rename = "mname")]
    pub mname: String,

    #[serde(rename = "refresh")]
    pub refresh: i32,

    #[serde(rename = "retry")]
    pub retry: i32,

    #[serde(rename = "rname")]
    pub rname: String,

    #[serde(rename = "serial")]
    pub serial: u32,
}

#[derive(Serialize, Deserialize)]
pub struct SrvType {
    #[serde(rename = "port")]
    pub port: u16,

    #[serde(rename = "priority")]
    pub priority: u16,

    #[serde(rename = "target")]
    pub target: String,

    #[serde(rename = "weight")]
    pub weight: u16,
}

#[derive(Serialize, Deserialize)]
pub struct TlsaType {
    #[serde(rename = "cert_data")]
    pub certData: String,

    #[serde(rename = "cert_usage")]
    pub certUsage: u8,

    #[serde(rename = "matching")]
    pub matching: u8,

    #[serde(rename = "selector")]
    pub selector: u8,
}
